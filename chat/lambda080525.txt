import json
import os
import boto3
import requests
from datetime import datetime, timezone, timedelta
import hashlib

# --- Environment Config ---
UNIPILE_API_KEY = os.getenv("UNIPILE_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# GREETED_TABLE = os.getenv("GREETED_TABLE", "GreetedUsers")
# DEDUP_TABLE = os.getenv("DEDUP_TABLE", "DedupedMessages")
ARIA_ID = os.getenv("ARIA_ID")

# --- AWS DynamoDB Setup ---
dynamodb = boto3.resource("dynamodb")
table = dynamodb.Table("AriaBotState")

def was_greeted(sender_id):
    try:
        response = table.get_item(Key={
            "PK": f"GREETED#{sender_id}",
            "SK": f"GREETED#{sender_id}"
        })
        return "Item" in response
    except Exception as e:
        print(f"DynamoDB get_item error (greeted): {e}")
        return False

def mark_greeted(sender_id, ttl_minutes=60):
    ttl = int((datetime.now(timezone.utc) + timedelta(minutes=ttl_minutes)).timestamp())
    try:
        table.put_item(Item={
            "PK": f"GREETED#{sender_id}",
            "SK": f"GREETED#{sender_id}",
            "ttl": ttl
        })
    except Exception as e:
        print(f"DynamoDB put_item error (mark_greeted): {e}")



def store_message_for_user(sender_id, role, content, ttl_minutes=30):
    ttl = int((datetime.now(timezone.utc) + timedelta(minutes=ttl_minutes)).timestamp())
    timestamp = datetime.now(timezone.utc).isoformat()
    message_id = hashlib.sha256(f"{sender_id}:{timestamp}:{role}".encode()).hexdigest()
    
    try:
        table.put_item(Item={
            "PK": f"MEMORY#{sender_id}",
            "SK": f"MSG#{timestamp}",
            "role": role,
            "content": content,
            "ttl": ttl
        })
    except Exception as e:
        print(f"[DynamoDB Error - store_message] {e}")

def get_recent_messages(sender_id, limit=10):
    try:
        response = table.query(
            KeyConditionExpression=boto3.dynamodb.conditions.Key("PK").eq(f"MEMORY#{sender_id}"),
            ScanIndexForward=True,  # Oldest to newest
            Limit=limit
        )
        return [
            {"role": item["role"], "content": item["content"]}
            for item in response.get("Items", [])
        ]
    except Exception as e:
        print(f"[DynamoDB Error - get_recent_messages] {e}")
        return []


def generate_openai_reply(user_message, sender_name, greeted_before, sender_id):
    """Generate response using OpenAI with short-term memory."""
    if sender_id == ARIA_ID:
        return None

    # Greeting message based on whether the user has been greeted before
    greeting = f"Hello {sender_name}, how can I assist you today?" if not greeted_before else ""

    # System prompt for guiding the assistant's behavior
    system_prompt = (
        "You are ARIA, Baseone's digital assistant. You will:\n"
        "- You respond precise and professional"
        "- Your CEO is Matthew spuffard"
        "- Accept to check and schedule sales calls with our team or CEO.\n"
        "- Only store contact details with explicit consent.\n"
        "- Maintain a professional and engaging tone.\n"
        "- if asked provide\n"
        "- Website: https://baseone.uk/\n"
        "- About: https://baseone.uk/our-purpose/\n"
        "- Services: https://baseone.uk/services/\n"
        "- Case Studies: https://baseone.uk/casestudies/\n"
        "- Insights: https://baseone.uk/latest-insights/\n"
        "- Contact: https://baseone.uk/get-in-touch/\n"
        "- ARIA Page: https://www.linkedin.com/company/106444572/admin/dashboard/\n"
        "- BaseOne LinkedIn: https://www.linkedin.com/company/baseone/\n"
        "- CEO: https://www.linkedin.com/in/matthewspuffard/"
    )

    # Get the user's recent message history from memory
    history = get_recent_messages(sender_id, limit=5)  # Limit to last 5 messages
    messages = [{"role": "system", "content": system_prompt}] + history
    messages.append({"role": "user", "content": user_message})

    # OpenAI API payload
    payload = {
        "model": "gpt-3.5-turbo",
        "messages": messages,
        "temperature": 0.5,
        "max_tokens": 200
    }

    try:
        # Sending the request to OpenAI API
        response = requests.post(
            "https://api.openai.com/v1/chat/completions",
            headers={"Authorization": f"Bearer {OPENAI_API_KEY}", "Content-Type": "application/json"},
            json=payload
        )
        data = response.json()

        # If there was an error in the response, return a default reply
        if response.status_code != 200 or "choices" not in data:
            print(f"[OpenAI API Error] {data}")
            return "Thanks for your message! One of our executives will reach out shortly."
        
        # Get the reply from OpenAI response
        reply = data["choices"][0]["message"]["content"].strip()

        # Store both user and assistant messages for short-term memory
        store_message_for_user(sender_id, "user", user_message)
        store_message_for_user(sender_id, "assistant", reply)

        return f"{greeting}\n{reply}" if greeting else reply

    except Exception as e:
        print(f"[OpenAI Error] {e}")
        return "Thanks for your message! One of our executives will reach out shortly."


def send_unipile_message(chat_id, account_id, message, api_key):
    """Send message using Unipile API."""
    try:
        url = f"https://api.unipile.com/conversations/{chat_id}/messages"
        payload = {"message": message, "account_id": account_id}
        headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
        response = requests.post(url, headers=headers, json=payload)
        return response.status_code, response.text
    except Exception as e:
        print(f"[Unipile Error] {e}")
        return 500, str(e)

# --- Lambda Entry Point ---
def lambda_handler(event, context):
    print("Event received:", json.dumps(event, indent=2))
    try:
        body = json.loads(event.get("body", "{}"))
    except Exception as e:
        return {"statusCode": 400, "body": json.dumps({"error": f"Invalid JSON: {str(e)}"})}

    required_fields = ["event", "message_type", "message", "sender", "account_info", "chat_id", "account_id", "timestamp"]
    if not all(field in body for field in required_fields):
        return {"statusCode": 200, "body": json.dumps({"message": "Ignored non-message event"})}

    # Extract fields
    event_type = body["event"]
    message_type = body["message_type"]
    message = body.get("message", "").strip()
    sender = body["sender"]
    sender_name = sender.get("attendee_name", "")
    sender_id = sender.get("attendee_id", "")
    account_name = body["account_info"].get("name", "")
    chat_id = body["chat_id"]
    account_id = body["account_id"]
    timestamp = body["timestamp"]


    if event_type != "message_received" or message_type != "MESSAGE" or not message:
        return {"statusCode": 200, "body": json.dumps({"message": "Non-message event"})}
    else:        
        sender_id == ARIA_ID or sender_name == account_name:
        return {"statusCode": 200, "body": json.dumps({"message": "Self message ignored"})}

    message_key = hashlib.sha256(f"{chat_id}:{sender_id}:{message}".encode()).hexdigest()

    greeted_before = was_greeted(sender_id)
    if not greeted_before:
        mark_greeted(sender_id)

    reply = generate_openai_reply(message, sender_name, greeted_before, sender_id)
    print("Reply generated:", reply)

    status, response_text = send_unipile_message(chat_id, account_id, reply, UNIPILE_API_KEY)

    return {
        "statusCode": 200 if status == 200 else 500,
        "body": json.dumps({
            "message": "Reply sent" if status == 200 else "Failed to send reply",
            "unipile_response": response_text
        })
    }
